#!/usr/bin/env bash
# bin/compile

set -e

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

echo "-----> Starting node_modules cleanup buildpack"

# Function to log messages
log() {
    echo "       $1"
}

# Check if this is a Node.js app with node_modules
if [ -d "$BUILD_DIR/node_modules" ]; then
    log "Found node_modules directory"
    
    # Get the size before cleanup
    SIZE_BEFORE=$(du -sh "$BUILD_DIR/node_modules" | cut -f1)
    log "node_modules size before cleanup: $SIZE_BEFORE"
    
    # Check if this is a Next.js app (look for common Next.js indicators)
    if [ -f "$BUILD_DIR/next.config.js" ] || [ -f "$BUILD_DIR/next.config.mjs" ] || [ -f "$BUILD_DIR/next.config.ts" ] || [ -d "$BUILD_DIR/pages" ] || [ -d "$BUILD_DIR/app" ] || grep -q "next" "$BUILD_DIR/package.json" 2>/dev/null; then
        log "Detected Next.js application"
        
        # Check if there's a .next build directory (indicates successful build)
        if [ -d "$BUILD_DIR/.next" ]; then
            log "Found .next build directory"
            
            # Check if this is a standalone build
            if [ -d "$BUILD_DIR/.next/standalone" ]; then
                log "Detected Next.js standalone build - safe to remove node_modules"
                
                # Remove the entire node_modules directory
                log "Removing entire node_modules directory..."
                rm -rf "$BUILD_DIR/node_modules"
                
                # Set up proper standalone build structure
                log "Setting up standalone build structure..."
                
                # The standalone server expects a specific directory structure
                # We need to copy the standalone build and organize files correctly
                
                # Copy the standalone server to root
                if [ -f "$BUILD_DIR/.next/standalone/server.js" ]; then
                    cp "$BUILD_DIR/.next/standalone/server.js" "$BUILD_DIR/"
                    log "Copied standalone server to root"
                else
                    log "ERROR: No server.js found in standalone build"
                    exit 1
                fi
                
                # Copy standalone node_modules (these are the minimal runtime deps)
                if [ -d "$BUILD_DIR/.next/standalone/node_modules" ]; then
                    cp -r "$BUILD_DIR/.next/standalone/node_modules" "$BUILD_DIR/"
                    log "Copied standalone runtime dependencies"
                fi
                
                # Copy standalone package.json
                if [ -f "$BUILD_DIR/.next/standalone/package.json" ]; then
                    cp "$BUILD_DIR/.next/standalone/package.json" "$BUILD_DIR/"
                    log "Copied standalone package.json"
                fi
                
                # Copy the standalone .next directory structure
                if [ -d "$BUILD_DIR/.next/standalone/.next" ]; then
                    # Remove the original .next directory and replace with standalone version
                    rm -rf "$BUILD_DIR/.next"
                    cp -r "$BUILD_DIR/.next/standalone/.next" "$BUILD_DIR/"
                    log "Copied standalone .next directory"
                fi
                
                # Ensure static files are in the right place
                if [ -d "$BUILD_DIR/.next/static" ]; then
                    log "Static files are in correct location"
                else
                    log "WARNING: No static files found - this may cause issues"
                fi
                
                # Clean up the standalone directory since we've copied everything
                rm -rf "$BUILD_DIR/.next/standalone"
                
                # Copy public files if they exist
                if [ -d "$BUILD_DIR/public" ]; then
                    log "Public files already in place"
                fi
                
                log "Standalone build optimization completed successfully"
                log "Slug size reduced by approximately $SIZE_BEFORE"
                
            else
                log "Standard Next.js build detected (not standalone)"
                log "Checking next.config for standalone output setting..."
                
                # Check if standalone output is configured
                STANDALONE_CONFIGURED=$(node -e "
                try {
                    const config = require('$BUILD_DIR/next.config.js');
                    console.log(config.output === 'standalone' ? 'true' : 'false');
                } catch (e) {
                    console.log('false');
                }
                " 2>/dev/null || echo "false")
                
                if [ "$STANDALONE_CONFIGURED" = "true" ]; then
                    log "WARNING: Standalone output is configured but .next/standalone directory not found"
                    log "This may indicate a build issue. Skipping node_modules removal for safety."
                else
                    log "Standard Next.js build requires node_modules at runtime"
                    log "To use this buildpack, set output: 'standalone' in your next.config.js"
                    log "Skipping node_modules removal"
                fi
            fi
        else
            log "No .next build directory found, skipping node_modules cleanup for safety"
        fi
        
    else
        log "Not a Next.js application, skipping node_modules cleanup"
    fi
else
    log "No node_modules directory found, nothing to clean up"
fi

# Create a runtime info file
cat > "$BUILD_DIR/.heroku/cleanup-info.txt" << EOF
Node.js modules cleanup completed at $(date)
$(if [ -d "$BUILD_DIR/.next/standalone" ]; then
    echo "Next.js standalone build detected and optimized."
    echo "The standalone build is self-contained and doesn't need node_modules."
else
    echo "Standard Next.js build detected."
    echo "To optimize slug size, configure output: 'standalone' in next.config.js"
fi)
EOF

echo "-----> node_modules cleanup buildpack completed"
