#!/usr/bin/env bash
# bin/compile

set -e

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

echo "-----> Starting node_modules cleanup buildpack"

# Function to log messages
log() {
    echo "       $1"
}

# Check if this is a Node.js app with node_modules
if [ -d "$BUILD_DIR/node_modules" ]; then
    log "Found node_modules directory"
    
    # Get the size before cleanup
    SIZE_BEFORE=$(du -sh "$BUILD_DIR/node_modules" | cut -f1)
    log "node_modules size before cleanup: $SIZE_BEFORE"
    
    # Check if this is a Next.js app (look for common Next.js indicators)
    if [ -f "$BUILD_DIR/next.config.js" ] || [ -f "$BUILD_DIR/next.config.mjs" ] || [ -f "$BUILD_DIR/next.config.ts" ] || [ -d "$BUILD_DIR/pages" ] || [ -d "$BUILD_DIR/app" ] || grep -q "next" "$BUILD_DIR/package.json" 2>/dev/null; then
        log "Detected Next.js application"
        
        # Create a backup of essential files that might be needed at runtime
        log "Creating backup of essential runtime files..."
        mkdir -p "$BUILD_DIR/.heroku/node_modules_backup"
        
        # Backup production dependencies that might be needed
        if [ -f "$BUILD_DIR/package.json" ]; then
            # Extract production dependencies
            node -e "
                const pkg = require('$BUILD_DIR/package.json');
                const deps = Object.keys(pkg.dependencies || {});
                console.log(deps.join(' '));
            " > "$BUILD_DIR/.heroku/prod_deps.txt"
            
            log "Backed up production dependencies list"
        fi
        
        # For Next.js, we need to be very careful about what we remove
        # Next.js builds to .next folder but still needs some node_modules at runtime
        # We'll only remove development dependencies and build tools
        
        # Check if there's a .next build directory (indicates successful build)
        if [ -d "$BUILD_DIR/.next" ]; then
            log "Found .next build directory"
            
            # Instead of removing all node_modules, let's remove only dev dependencies
            if [ -f "$BUILD_DIR/package.json" ]; then
                log "Analyzing package.json to identify removable dependencies..."
                
                # Create a script to remove only dev dependencies and build tools
                node -e "
                const fs = require('fs');
                const path = require('path');
                const pkg = require('$BUILD_DIR/package.json');
                
                // List of common dev dependencies and build tools that can be safely removed
                const removablePatterns = [
                    'eslint', '@typescript-eslint', 'prettier', 'husky', 'lint-staged',
                    'jest', '@testing-library', 'cypress', 'playwright',
                    'webpack', 'babel', '@babel', 'rollup', 'vite',
                    'typescript', '@types/', 'ts-node', 'ts-jest',
                    'postcss', 'tailwindcss', 'autoprefixer',
                    'sass', 'less', 'stylus',
                    '@storybook', 'storybook',
                    'nodemon', 'concurrently', 'cross-env',
                    'rimraf', 'shx', 'mkdirp'
                ];
                
                const devDeps = Object.keys(pkg.devDependencies || {});
                const allDeps = Object.keys(pkg.dependencies || {});
                
                // Find dependencies that match removable patterns
                const toRemove = [...devDeps];
                allDeps.forEach(dep => {
                    if (removablePatterns.some(pattern => dep.includes(pattern))) {
                        toRemove.push(dep);
                    }
                });
                
                console.log(JSON.stringify(toRemove));
                " > "$BUILD_DIR/.heroku/removable_deps.json"
                
                # Read the list and remove those specific packages
                if [ -s "$BUILD_DIR/.heroku/removable_deps.json" ]; then
                    REMOVABLE_DEPS=$(cat "$BUILD_DIR/.heroku/removable_deps.json")
                    log "Removing development dependencies and build tools..."
                    
                    # Parse JSON and remove each package directory
                    echo "$REMOVABLE_DEPS" | node -e "
                    const fs = require('fs');
                    const path = require('path');
                    let input = '';
                    process.stdin.on('data', chunk => input += chunk);
                    process.stdin.on('end', () => {
                        try {
                            const deps = JSON.parse(input);
                            let removed = 0;
                            deps.forEach(dep => {
                                const depPath = path.join('$BUILD_DIR/node_modules', dep);
                                if (fs.existsSync(depPath)) {
                                    try {
                                        fs.rmSync(depPath, { recursive: true, force: true });
                                        console.log('Removed:', dep);
                                        removed++;
                                    } catch (e) {
                                        console.log('Could not remove:', dep);
                                    }
                                }
                            });
                            console.log('Total packages removed:', removed);
                        } catch (e) {
                            console.log('Error parsing dependencies list');
                        }
                    });
                    "
                    
                    # Get new size
                    SIZE_AFTER=$(du -sh "$BUILD_DIR/node_modules" | cut -f1)
                    log "node_modules size after cleanup: $SIZE_AFTER"
                    log "Reduced from $SIZE_BEFORE to $SIZE_AFTER"
                else
                    log "No removable dependencies identified"
                fi
            fi
            
            log "Selective node_modules cleanup completed for Next.js app"
        else
            log "No .next build directory found, skipping node_modules cleanup for safety"
        fi
        
        # Calculate space saved
        if [ -n "$SIZE_AFTER" ]; then
            log "Space optimization completed"
        else
            log "Cleanup completed - production dependencies preserved"
        fi
        
    else
        log "Not a Next.js application, skipping node_modules cleanup"
    fi
else
    log "No node_modules directory found, nothing to clean up"
fi

# Create a runtime script for any post-deployment tasks
cat > "$BUILD_DIR/.heroku/cleanup-info.txt" << EOF
Node.js modules cleanup completed at $(date)
This buildpack selectively removed development dependencies and build tools to reduce slug size.
Production dependencies required by Next.js at runtime have been preserved.
Next.js server and runtime dependencies remain intact in node_modules.
EOF

echo "-----> node_modules cleanup buildpack completed"